const User = require("../models/userModels")
const jwt = require("jsonwebtoken")
const bcrypt = require("bcryptjs")
require("dotenv").config()

module.exports = {
    users: (req, res) => {
        User.find({})
            .then((user) => {
                res.json(user)
            })
    },
    register: async (req, res) => {

        try {
            // Deconstruct the user object
            const { email, password, passwordCheck, displayName } = req.body
            // Make suer every field is entered
            if (!email || !password || !passwordCheck || !displayName) {
                return res.status(400).json({ msg: "Must enter in all fields" })
            }
            // Make sure password is long enough
            if (password.length < 4) {
                return res.status(400).json({ msg: "Password must be longer then 4 characters" })
            }
            // Make sure password matches PasswordCheck
            if (password !== passwordCheck) {
                return res.status(400).json({ msg: "Password must match" })
            }
            // Make sure only one email is used per user
            const existingUser = await User.findOne({ email: email })

            if (existingUser) {
                return res.status(400).json({ msg: "Must use a different Email" })
            }
            // Defaults to 15 , but can enter 10-20 (more will slow down the system)
            const salt = await bcrypt.genSalt();
            const passwordHash = await bcrypt.hash(password, salt)

            const newUser = new User({
                email,
                password: passwordHash,
                displayName,
            })

            const savedUser = await newUser.save()
            res.json(savedUser)
        } catch (err) {
            res.status(500).json({ msg: err })
        }
    },

    // Login route function
    login: async (req, res) => {
        try {
            // Deconstruct to get the email and password
            const { email, password } = req.body
            // If email or password doesn't exist, send back a 400 error
            if (!email || !password) {
                res.status(400).json({ msg: "All required fields not sent" })
            }

            // Await the database check to see if the user exists
            const user = await User.findOne({ email: email })

            // Check to see if a user or not
            if (!user) {
                res.status(400).json({ msg: "User doesn't exist" })
            }

            // Check bcrypt to see if the password matches
            const isMatch = await bcrypt.compare(password, user.password)
            if (!isMatch) {
                res.status(400).json({ msg: "Incorrect Password" })
            }

            // Set the token to the user ID generated by MongoDB
            const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
                expiresIn: "24h"
            })

            res.json({
                token,
                user: { id: user._id, displayName: user.displayName }
            })


        } catch (err) {
            res.status(500).json({ msg: err })
        }

    },


    getUser: async (req, res) => {


    }


}